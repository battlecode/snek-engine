# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb_schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Adds a marker to the timeline at the current round
class TimelineMarkerAction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimelineMarkerAction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimelineMarkerAction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimelineMarkerAction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimelineMarkerAction
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TimelineMarkerActionStart(builder):
    builder.StartObject(1)

def Start(builder):
    TimelineMarkerActionStart(builder)

def TimelineMarkerActionAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    TimelineMarkerActionAddLabel(builder, label)

def TimelineMarkerActionEnd(builder):
    return builder.EndObject()

def End(builder):
    return TimelineMarkerActionEnd(builder)
