"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.unionListToEvent = exports.unionToEvent = exports.Event = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var game_footer_1 = require("../../battlecode/schema/game-footer");
var game_header_1 = require("../../battlecode/schema/game-header");
var match_footer_1 = require("../../battlecode/schema/match-footer");
var match_header_1 = require("../../battlecode/schema/match-header");
var round_1 = require("../../battlecode/schema/round");
/**
 * Events
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 */
var Event;
(function (Event) {
    Event[Event["NONE"] = 0] = "NONE";
    /**
     * There should only be one GameHeader, at the start of the stream.
     */
    Event[Event["GameHeader"] = 1] = "GameHeader";
    /**
     * There should be one MatchHeader at the start of each match.
     */
    Event[Event["MatchHeader"] = 2] = "MatchHeader";
    /**
     * A single simulation step. A round may be skipped if
     * nothing happens during its time.
     */
    Event[Event["Round"] = 3] = "Round";
    /**
     * There should be one MatchFooter at the end of each simulation step.
     */
    Event[Event["MatchFooter"] = 4] = "MatchFooter";
    /**
     * There should only be one GameFooter, at the end of the stream.
     */
    Event[Event["GameFooter"] = 5] = "GameFooter";
})(Event || (exports.Event = Event = {}));
function unionToEvent(type, accessor) {
    switch (Event[type]) {
        case 'NONE': return null;
        case 'GameHeader': return accessor(new game_header_1.GameHeader());
        case 'MatchHeader': return accessor(new match_header_1.MatchHeader());
        case 'Round': return accessor(new round_1.Round());
        case 'MatchFooter': return accessor(new match_footer_1.MatchFooter());
        case 'GameFooter': return accessor(new game_footer_1.GameFooter());
        default: return null;
    }
}
exports.unionToEvent = unionToEvent;
function unionListToEvent(type, accessor, index) {
    switch (Event[type]) {
        case 'NONE': return null;
        case 'GameHeader': return accessor(index, new game_header_1.GameHeader());
        case 'MatchHeader': return accessor(index, new match_header_1.MatchHeader());
        case 'Round': return accessor(index, new round_1.Round());
        case 'MatchFooter': return accessor(index, new match_footer_1.MatchFooter());
        case 'GameFooter': return accessor(index, new game_footer_1.GameFooter());
        default: return null;
    }
}
exports.unionListToEvent = unionListToEvent;
