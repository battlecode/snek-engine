"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialBodyTable = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var spawn_action_1 = require("../../battlecode/schema/spawn-action");
var InitialBodyTable = /** @class */ (function () {
    function InitialBodyTable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    InitialBodyTable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    InitialBodyTable.getRootAsInitialBodyTable = function (bb, obj) {
        return (obj || new InitialBodyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    InitialBodyTable.getSizePrefixedRootAsInitialBodyTable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InitialBodyTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    InitialBodyTable.prototype.robotIds = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    InitialBodyTable.prototype.robotIdsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    InitialBodyTable.prototype.robotIdsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    InitialBodyTable.prototype.spawnActions = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new spawn_action_1.SpawnAction()).__init(this.bb.__vector(this.bb_pos + offset) + index * 6, this.bb) : null;
    };
    InitialBodyTable.prototype.spawnActionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    InitialBodyTable.startInitialBodyTable = function (builder) {
        builder.startObject(2);
    };
    InitialBodyTable.addRobotIds = function (builder, robotIdsOffset) {
        builder.addFieldOffset(0, robotIdsOffset, 0);
    };
    InitialBodyTable.createRobotIdsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    InitialBodyTable.startRobotIdsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    InitialBodyTable.addSpawnActions = function (builder, spawnActionsOffset) {
        builder.addFieldOffset(1, spawnActionsOffset, 0);
    };
    InitialBodyTable.startSpawnActionsVector = function (builder, numElems) {
        builder.startVector(6, numElems, 2);
    };
    InitialBodyTable.endInitialBodyTable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    InitialBodyTable.createInitialBodyTable = function (builder, robotIdsOffset, spawnActionsOffset) {
        InitialBodyTable.startInitialBodyTable(builder);
        InitialBodyTable.addRobotIds(builder, robotIdsOffset);
        InitialBodyTable.addSpawnActions(builder, spawnActionsOffset);
        return InitialBodyTable.endInitialBodyTable(builder);
    };
    return InitialBodyTable;
}());
exports.InitialBodyTable = InitialBodyTable;
