import * as flatbuffers from 'flatbuffers';
import { Action } from '../../battlecode/schema/action';
export declare class Turn {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): Turn;
    static getRootAsTurn(bb: flatbuffers.ByteBuffer, obj?: Turn): Turn;
    static getSizePrefixedRootAsTurn(bb: flatbuffers.ByteBuffer, obj?: Turn): Turn;
    robotId(): number;
    health(): number;
    paint(): number;
    moveCooldown(): number;
    actionCooldown(): number;
    bytecodesUsed(): number;
    x(): number;
    y(): number;
    actionsType(index: number): Action | null;
    actionsTypeLength(): number;
    actionsTypeArray(): Uint8Array | null;
    actions(index: number, obj: any): any | null;
    actionsLength(): number;
    static startTurn(builder: flatbuffers.Builder): void;
    static addRobotId(builder: flatbuffers.Builder, robotId: number): void;
    static addHealth(builder: flatbuffers.Builder, health: number): void;
    static addPaint(builder: flatbuffers.Builder, paint: number): void;
    static addMoveCooldown(builder: flatbuffers.Builder, moveCooldown: number): void;
    static addActionCooldown(builder: flatbuffers.Builder, actionCooldown: number): void;
    static addBytecodesUsed(builder: flatbuffers.Builder, bytecodesUsed: number): void;
    static addX(builder: flatbuffers.Builder, x: number): void;
    static addY(builder: flatbuffers.Builder, y: number): void;
    static addActionsType(builder: flatbuffers.Builder, actionsTypeOffset: flatbuffers.Offset): void;
    static createActionsTypeVector(builder: flatbuffers.Builder, data: Action[]): flatbuffers.Offset;
    static startActionsTypeVector(builder: flatbuffers.Builder, numElems: number): void;
    static addActions(builder: flatbuffers.Builder, actionsOffset: flatbuffers.Offset): void;
    static createActionsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startActionsVector(builder: flatbuffers.Builder, numElems: number): void;
    static endTurn(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createTurn(builder: flatbuffers.Builder, robotId: number, health: number, paint: number, moveCooldown: number, actionCooldown: number, bytecodesUsed: number, x: number, y: number, actionsTypeOffset: flatbuffers.Offset, actionsOffset: flatbuffers.Offset): flatbuffers.Offset;
}
