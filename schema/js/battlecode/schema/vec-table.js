"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.VecTable = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var VecTable = /** @class */ (function () {
    function VecTable() {
        this.bb = null;
        this.bb_pos = 0;
    }
    VecTable.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    VecTable.getRootAsVecTable = function (bb, obj) {
        return (obj || new VecTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VecTable.getSizePrefixedRootAsVecTable = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VecTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VecTable.prototype.xs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    VecTable.prototype.xsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    VecTable.prototype.xsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    VecTable.prototype.ys = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    VecTable.prototype.ysLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    VecTable.prototype.ysArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    VecTable.startVecTable = function (builder) {
        builder.startObject(2);
    };
    VecTable.addXs = function (builder, xsOffset) {
        builder.addFieldOffset(0, xsOffset, 0);
    };
    VecTable.createXsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    VecTable.startXsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    VecTable.addYs = function (builder, ysOffset) {
        builder.addFieldOffset(1, ysOffset, 0);
    };
    VecTable.createYsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    VecTable.startYsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    VecTable.endVecTable = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    VecTable.createVecTable = function (builder, xsOffset, ysOffset) {
        VecTable.startVecTable(builder);
        VecTable.addXs(builder, xsOffset);
        VecTable.addYs(builder, ysOffset);
        return VecTable.endVecTable(builder);
    };
    return VecTable;
}());
exports.VecTable = VecTable;
