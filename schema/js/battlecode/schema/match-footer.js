"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchFooter = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var profiler_file_1 = require("../../battlecode/schema/profiler-file");
var win_type_1 = require("../../battlecode/schema/win-type");
/**
 * Sent to end a match.
 */
var MatchFooter = /** @class */ (function () {
    function MatchFooter() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MatchFooter.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MatchFooter.getRootAsMatchFooter = function (bb, obj) {
        return (obj || new MatchFooter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatchFooter.getSizePrefixedRootAsMatchFooter = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatchFooter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * The ID of the winning team.
     */
    MatchFooter.prototype.winner = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    /**
     * The reason for winning
     */
    MatchFooter.prototype.winType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : win_type_1.WinType.RESIGNATION;
    };
    /**
     * The number of rounds played.
     */
    MatchFooter.prototype.totalRounds = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * Profiler data for team A and B if profiling is enabled.
     */
    MatchFooter.prototype.profilerFiles = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new profiler_file_1.ProfilerFile()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    MatchFooter.prototype.profilerFilesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    MatchFooter.startMatchFooter = function (builder) {
        builder.startObject(4);
    };
    MatchFooter.addWinner = function (builder, winner) {
        builder.addFieldInt8(0, winner, 0);
    };
    MatchFooter.addWinType = function (builder, winType) {
        builder.addFieldInt8(1, winType, win_type_1.WinType.RESIGNATION);
    };
    MatchFooter.addTotalRounds = function (builder, totalRounds) {
        builder.addFieldInt32(2, totalRounds, 0);
    };
    MatchFooter.addProfilerFiles = function (builder, profilerFilesOffset) {
        builder.addFieldOffset(3, profilerFilesOffset, 0);
    };
    MatchFooter.createProfilerFilesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    MatchFooter.startProfilerFilesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    MatchFooter.endMatchFooter = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MatchFooter.createMatchFooter = function (builder, winner, winType, totalRounds, profilerFilesOffset) {
        MatchFooter.startMatchFooter(builder);
        MatchFooter.addWinner(builder, winner);
        MatchFooter.addWinType(builder, winType);
        MatchFooter.addTotalRounds(builder, totalRounds);
        MatchFooter.addProfilerFiles(builder, profilerFilesOffset);
        return MatchFooter.endMatchFooter(builder);
    };
    return MatchFooter;
}());
exports.MatchFooter = MatchFooter;
