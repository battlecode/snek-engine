"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameMap = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var initial_body_table_1 = require("../../battlecode/schema/initial-body-table");
var vec_1 = require("../../battlecode/schema/vec");
var vec_table_1 = require("../../battlecode/schema/vec-table");
var GameMap = /** @class */ (function () {
    function GameMap() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GameMap.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GameMap.getRootAsGameMap = function (bb, obj) {
        return (obj || new GameMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GameMap.getSizePrefixedRootAsGameMap = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GameMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GameMap.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    GameMap.prototype.size = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new vec_1.Vec()).__init(this.bb_pos + offset, this.bb) : null;
    };
    GameMap.prototype.symmetry = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameMap.prototype.initialBodies = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new initial_body_table_1.InitialBodyTable()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    GameMap.prototype.randomSeed = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    GameMap.prototype.walls = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
    };
    GameMap.prototype.wallsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GameMap.prototype.wallsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    GameMap.prototype.paint = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    GameMap.prototype.paintLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GameMap.prototype.paintArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    GameMap.prototype.ruins = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new vec_table_1.VecTable()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    GameMap.prototype.paintPatterns = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    GameMap.prototype.paintPatternsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GameMap.prototype.paintPatternsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    GameMap.startGameMap = function (builder) {
        builder.startObject(9);
    };
    GameMap.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    GameMap.addSize = function (builder, sizeOffset) {
        builder.addFieldStruct(1, sizeOffset, 0);
    };
    GameMap.addSymmetry = function (builder, symmetry) {
        builder.addFieldInt32(2, symmetry, 0);
    };
    GameMap.addInitialBodies = function (builder, initialBodiesOffset) {
        builder.addFieldOffset(3, initialBodiesOffset, 0);
    };
    GameMap.addRandomSeed = function (builder, randomSeed) {
        builder.addFieldInt32(4, randomSeed, 0);
    };
    GameMap.addWalls = function (builder, wallsOffset) {
        builder.addFieldOffset(5, wallsOffset, 0);
    };
    GameMap.createWallsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(+data[i]);
        }
        return builder.endVector();
    };
    GameMap.startWallsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    GameMap.addPaint = function (builder, paintOffset) {
        builder.addFieldOffset(6, paintOffset, 0);
    };
    GameMap.createPaintVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    GameMap.startPaintVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    GameMap.addRuins = function (builder, ruinsOffset) {
        builder.addFieldOffset(7, ruinsOffset, 0);
    };
    GameMap.addPaintPatterns = function (builder, paintPatternsOffset) {
        builder.addFieldOffset(8, paintPatternsOffset, 0);
    };
    GameMap.createPaintPatternsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    GameMap.startPaintPatternsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    GameMap.endGameMap = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return GameMap;
}());
exports.GameMap = GameMap;
