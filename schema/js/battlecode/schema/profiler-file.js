"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerFile = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var profiler_profile_1 = require("../../battlecode/schema/profiler-profile");
/**
 * A profiler file is a collection of profiles.
 * When profiling is enabled there is one of these per team per match.
 */
var ProfilerFile = /** @class */ (function () {
    function ProfilerFile() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ProfilerFile.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ProfilerFile.getRootAsProfilerFile = function (bb, obj) {
        return (obj || new ProfilerFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProfilerFile.getSizePrefixedRootAsProfilerFile = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ProfilerFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProfilerFile.prototype.frames = function (index, optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    };
    ProfilerFile.prototype.framesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * The recorded profiles, one per robot.
     */
    ProfilerFile.prototype.profiles = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new profiler_profile_1.ProfilerProfile()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    ProfilerFile.prototype.profilesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    ProfilerFile.startProfilerFile = function (builder) {
        builder.startObject(2);
    };
    ProfilerFile.addFrames = function (builder, framesOffset) {
        builder.addFieldOffset(0, framesOffset, 0);
    };
    ProfilerFile.createFramesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    ProfilerFile.startFramesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ProfilerFile.addProfiles = function (builder, profilesOffset) {
        builder.addFieldOffset(1, profilesOffset, 0);
    };
    ProfilerFile.createProfilesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    ProfilerFile.startProfilesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ProfilerFile.endProfilerFile = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ProfilerFile.createProfilerFile = function (builder, framesOffset, profilesOffset) {
        ProfilerFile.startProfilerFile(builder);
        ProfilerFile.addFrames(builder, framesOffset);
        ProfilerFile.addProfiles(builder, profilesOffset);
        return ProfilerFile.endProfilerFile(builder);
    };
    return ProfilerFile;
}());
exports.ProfilerFile = ProfilerFile;
