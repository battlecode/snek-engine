"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchHeader = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var game_map_1 = require("../../battlecode/schema/game-map");
/**
 * Sent to start a match.
 */
var MatchHeader = /** @class */ (function () {
    function MatchHeader() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MatchHeader.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MatchHeader.getRootAsMatchHeader = function (bb, obj) {
        return (obj || new MatchHeader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatchHeader.getSizePrefixedRootAsMatchHeader = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MatchHeader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MatchHeader.prototype.map = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new game_map_1.GameMap()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    MatchHeader.prototype.maxRounds = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    MatchHeader.startMatchHeader = function (builder) {
        builder.startObject(2);
    };
    MatchHeader.addMap = function (builder, mapOffset) {
        builder.addFieldOffset(0, mapOffset, 0);
    };
    MatchHeader.addMaxRounds = function (builder, maxRounds) {
        builder.addFieldInt32(1, maxRounds, 0);
    };
    MatchHeader.endMatchHeader = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    MatchHeader.createMatchHeader = function (builder, mapOffset, maxRounds) {
        MatchHeader.startMatchHeader(builder);
        MatchHeader.addMap(builder, mapOffset);
        MatchHeader.addMaxRounds(builder, maxRounds);
        return MatchHeader.endMatchHeader(builder);
    };
    return MatchHeader;
}());
exports.MatchHeader = MatchHeader;
