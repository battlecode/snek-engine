"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Turn = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var Turn = /** @class */ (function () {
    function Turn() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Turn.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Turn.getRootAsTurn = function (bb, obj) {
        return (obj || new Turn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Turn.getSizePrefixedRootAsTurn = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Turn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Turn.prototype.robotId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.health = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.paint = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.moveCooldown = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.actionCooldown = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.bytecodesUsed = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Turn.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Turn.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    };
    Turn.prototype.actionsType = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Turn.prototype.actionsTypeLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Turn.prototype.actionsTypeArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Turn.prototype.actions = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__union(obj, this.bb.__vector(this.bb_pos + offset) + index * 4) : null;
    };
    Turn.prototype.actionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Turn.startTurn = function (builder) {
        builder.startObject(10);
    };
    Turn.addRobotId = function (builder, robotId) {
        builder.addFieldInt32(0, robotId, 0);
    };
    Turn.addHealth = function (builder, health) {
        builder.addFieldInt32(1, health, 0);
    };
    Turn.addPaint = function (builder, paint) {
        builder.addFieldInt32(2, paint, 0);
    };
    Turn.addMoveCooldown = function (builder, moveCooldown) {
        builder.addFieldInt32(3, moveCooldown, 0);
    };
    Turn.addActionCooldown = function (builder, actionCooldown) {
        builder.addFieldInt32(4, actionCooldown, 0);
    };
    Turn.addBytecodesUsed = function (builder, bytecodesUsed) {
        builder.addFieldInt32(5, bytecodesUsed, 0);
    };
    Turn.addX = function (builder, x) {
        builder.addFieldInt8(6, x, 0);
    };
    Turn.addY = function (builder, y) {
        builder.addFieldInt8(7, y, 0);
    };
    Turn.addActionsType = function (builder, actionsTypeOffset) {
        builder.addFieldOffset(8, actionsTypeOffset, 0);
    };
    Turn.createActionsTypeVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Turn.startActionsTypeVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Turn.addActions = function (builder, actionsOffset) {
        builder.addFieldOffset(9, actionsOffset, 0);
    };
    Turn.createActionsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Turn.startActionsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Turn.endTurn = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Turn.createTurn = function (builder, robotId, health, paint, moveCooldown, actionCooldown, bytecodesUsed, x, y, actionsTypeOffset, actionsOffset) {
        Turn.startTurn(builder);
        Turn.addRobotId(builder, robotId);
        Turn.addHealth(builder, health);
        Turn.addPaint(builder, paint);
        Turn.addMoveCooldown(builder, moveCooldown);
        Turn.addActionCooldown(builder, actionCooldown);
        Turn.addBytecodesUsed(builder, bytecodesUsed);
        Turn.addX(builder, x);
        Turn.addY(builder, y);
        Turn.addActionsType(builder, actionsTypeOffset);
        Turn.addActions(builder, actionsOffset);
        return Turn.endTurn(builder);
    };
    return Turn;
}());
exports.Turn = Turn;
