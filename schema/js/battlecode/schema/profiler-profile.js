"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerProfile = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var profiler_event_1 = require("../../battlecode/schema/profiler-event");
/**
 * A profile contains all events and is labeled with a name.
 */
var ProfilerProfile = /** @class */ (function () {
    function ProfilerProfile() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ProfilerProfile.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ProfilerProfile.getRootAsProfilerProfile = function (bb, obj) {
        return (obj || new ProfilerProfile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProfilerProfile.getSizePrefixedRootAsProfilerProfile = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ProfilerProfile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProfilerProfile.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * The events that occurred in the profile.
     */
    ProfilerProfile.prototype.events = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new profiler_event_1.ProfilerEvent()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    ProfilerProfile.prototype.eventsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    ProfilerProfile.startProfilerProfile = function (builder) {
        builder.startObject(2);
    };
    ProfilerProfile.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    ProfilerProfile.addEvents = function (builder, eventsOffset) {
        builder.addFieldOffset(1, eventsOffset, 0);
    };
    ProfilerProfile.createEventsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    ProfilerProfile.startEventsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    ProfilerProfile.endProfilerProfile = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ProfilerProfile.createProfilerProfile = function (builder, nameOffset, eventsOffset) {
        ProfilerProfile.startProfilerProfile(builder);
        ProfilerProfile.addName(builder, nameOffset);
        ProfilerProfile.addEvents(builder, eventsOffset);
        return ProfilerProfile.endProfilerProfile(builder);
    };
    return ProfilerProfile;
}());
exports.ProfilerProfile = ProfilerProfile;
