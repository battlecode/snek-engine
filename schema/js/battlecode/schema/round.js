"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Round = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var turn_1 = require("../../battlecode/schema/turn");
/**
 * A single time-step in a Game, which contains a list of robot turns
 */
var Round = /** @class */ (function () {
    function Round() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Round.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Round.getRootAsRound = function (bb, obj) {
        return (obj || new Round()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Round.getSizePrefixedRootAsRound = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Round()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * The IDs of teams in the Game.
     */
    Round.prototype.teamIds = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Round.prototype.teamIdsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Round.prototype.teamIdsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * The total amount of resource this round per team
     */
    Round.prototype.teamResourceAmounts = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Round.prototype.teamResourceAmountsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Round.prototype.teamResourceAmountsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Ordered turn data for each robot during the round
     */
    Round.prototype.turns = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new turn_1.Turn()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Round.prototype.turnsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * The IDs of bodies that died.
     */
    Round.prototype.diedIds = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Round.prototype.diedIdsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Round.prototype.diedIdsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * The first sent Round in a match should have index 1. (The starting state,
     * created by the MatchHeader, can be thought to have index 0.)
     * It should increase by one for each following round.
     */
    Round.prototype.roundId = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Round.startRound = function (builder) {
        builder.startObject(5);
    };
    Round.addTeamIds = function (builder, teamIdsOffset) {
        builder.addFieldOffset(0, teamIdsOffset, 0);
    };
    Round.createTeamIdsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Round.startTeamIdsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Round.addTeamResourceAmounts = function (builder, teamResourceAmountsOffset) {
        builder.addFieldOffset(1, teamResourceAmountsOffset, 0);
    };
    Round.createTeamResourceAmountsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Round.startTeamResourceAmountsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Round.addTurns = function (builder, turnsOffset) {
        builder.addFieldOffset(2, turnsOffset, 0);
    };
    Round.createTurnsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Round.startTurnsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Round.addDiedIds = function (builder, diedIdsOffset) {
        builder.addFieldOffset(3, diedIdsOffset, 0);
    };
    Round.createDiedIdsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Round.startDiedIdsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Round.addRoundId = function (builder, roundId) {
        builder.addFieldInt32(4, roundId, 0);
    };
    Round.endRound = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Round.createRound = function (builder, teamIdsOffset, teamResourceAmountsOffset, turnsOffset, diedIdsOffset, roundId) {
        Round.startRound(builder);
        Round.addTeamIds(builder, teamIdsOffset);
        Round.addTeamResourceAmounts(builder, teamResourceAmountsOffset);
        Round.addTurns(builder, turnsOffset);
        Round.addDiedIds(builder, diedIdsOffset);
        Round.addRoundId(builder, roundId);
        return Round.endRound(builder);
    };
    return Round;
}());
exports.Round = Round;
