"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerEvent = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 * These tables are set-up so that they match closely with speedscope's file format documented at
 * https://github.com/jlfwong/speedscope/wiki/Importing-from-custom-sources.
 * The client uses speedscope to show the recorded data in an interactive interface.
 * A single event in a profile. Represents either an open event (meaning a
 * method has been entered) or a close event (meaning the method was exited).
 */
var ProfilerEvent = /** @class */ (function () {
    function ProfilerEvent() {
        this.bb = null;
        this.bb_pos = 0;
    }
    ProfilerEvent.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    ProfilerEvent.getRootAsProfilerEvent = function (bb, obj) {
        return (obj || new ProfilerEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    ProfilerEvent.getSizePrefixedRootAsProfilerEvent = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ProfilerEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Whether this is an open event (true) or a close event (false).
     */
    ProfilerEvent.prototype.isOpen = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * The bytecode counter at the time the event occurred.
     */
    ProfilerEvent.prototype.at = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * The index of the method name in the ProfilerFile.frames array.
     */
    ProfilerEvent.prototype.frame = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    ProfilerEvent.startProfilerEvent = function (builder) {
        builder.startObject(3);
    };
    ProfilerEvent.addIsOpen = function (builder, isOpen) {
        builder.addFieldInt8(0, +isOpen, +false);
    };
    ProfilerEvent.addAt = function (builder, at) {
        builder.addFieldInt32(1, at, 0);
    };
    ProfilerEvent.addFrame = function (builder, frame) {
        builder.addFieldInt32(2, frame, 0);
    };
    ProfilerEvent.endProfilerEvent = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    ProfilerEvent.createProfilerEvent = function (builder, isOpen, at, frame) {
        ProfilerEvent.startProfilerEvent(builder);
        ProfilerEvent.addIsOpen(builder, isOpen);
        ProfilerEvent.addAt(builder, at);
        ProfilerEvent.addFrame(builder, frame);
        return ProfilerEvent.endProfilerEvent(builder);
    };
    return ProfilerEvent;
}());
exports.ProfilerEvent = ProfilerEvent;
