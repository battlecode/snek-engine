"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameWrapper = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var event_wrapper_1 = require("../../battlecode/schema/event-wrapper");
/**
 * If events are not otherwise delimited, this wrapper structure
 * allows a game to be stored in a single buffer.
 * The first event will be a GameHeader; the last event will be a GameFooter.
 * matchHeaders[0] is the index of the 0th match header in the event stream,
 * corresponding to matchFooters[0]. These indices allow quick traversal of
 * the file.
 */
var GameWrapper = /** @class */ (function () {
    function GameWrapper() {
        this.bb = null;
        this.bb_pos = 0;
    }
    GameWrapper.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    GameWrapper.getRootAsGameWrapper = function (bb, obj) {
        return (obj || new GameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    GameWrapper.getSizePrefixedRootAsGameWrapper = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new GameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * The series of events comprising the game.
     */
    GameWrapper.prototype.events = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new event_wrapper_1.EventWrapper()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    GameWrapper.prototype.eventsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * The indices of the headers of the matches, in order.
     */
    GameWrapper.prototype.matchHeaders = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    GameWrapper.prototype.matchHeadersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GameWrapper.prototype.matchHeadersArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * The indices of the footers of the matches, in order.
     */
    GameWrapper.prototype.matchFooters = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    GameWrapper.prototype.matchFootersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    GameWrapper.prototype.matchFootersArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    GameWrapper.startGameWrapper = function (builder) {
        builder.startObject(3);
    };
    GameWrapper.addEvents = function (builder, eventsOffset) {
        builder.addFieldOffset(0, eventsOffset, 0);
    };
    GameWrapper.createEventsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    GameWrapper.startEventsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    GameWrapper.addMatchHeaders = function (builder, matchHeadersOffset) {
        builder.addFieldOffset(1, matchHeadersOffset, 0);
    };
    GameWrapper.createMatchHeadersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    GameWrapper.startMatchHeadersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    GameWrapper.addMatchFooters = function (builder, matchFootersOffset) {
        builder.addFieldOffset(2, matchFootersOffset, 0);
    };
    GameWrapper.createMatchFootersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    GameWrapper.startMatchFootersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    GameWrapper.endGameWrapper = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    GameWrapper.createGameWrapper = function (builder, eventsOffset, matchHeadersOffset, matchFootersOffset) {
        GameWrapper.startGameWrapper(builder);
        GameWrapper.addEvents(builder, eventsOffset);
        GameWrapper.addMatchHeaders(builder, matchHeadersOffset);
        GameWrapper.addMatchFooters(builder, matchFootersOffset);
        return GameWrapper.endGameWrapper(builder);
    };
    return GameWrapper;
}());
exports.GameWrapper = GameWrapper;
