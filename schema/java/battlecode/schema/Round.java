// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A single time-step in a Game, which contains a list of robot turns
 */
@SuppressWarnings("unused")
public final class Round extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Round getRootAsRound(ByteBuffer _bb) { return getRootAsRound(_bb, new Round()); }
  public static Round getRootAsRound(ByteBuffer _bb, Round obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Round __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The IDs of teams in the Game.
   */
  public int teamIds(int j) { int o = __offset(4); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int teamIdsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public IntVector teamIdsVector() { return teamIdsVector(new IntVector()); }
  public IntVector teamIdsVector(IntVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer teamIdsAsByteBuffer() { return __vector_as_bytebuffer(4, 4); }
  public ByteBuffer teamIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 4); }
  /**
   * The total amount of resource this round per team
   */
  public int teamResourceAmounts(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int teamResourceAmountsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public IntVector teamResourceAmountsVector() { return teamResourceAmountsVector(new IntVector()); }
  public IntVector teamResourceAmountsVector(IntVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer teamResourceAmountsAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer teamResourceAmountsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  /**
   * Ordered turn data for each robot during the round
   */
  public battlecode.schema.Turn turns(int j) { return turns(new battlecode.schema.Turn(), j); }
  public battlecode.schema.Turn turns(battlecode.schema.Turn obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int turnsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public battlecode.schema.Turn.Vector turnsVector() { return turnsVector(new battlecode.schema.Turn.Vector()); }
  public battlecode.schema.Turn.Vector turnsVector(battlecode.schema.Turn.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The IDs of bodies that died.
   */
  public int diedIds(int j) { int o = __offset(10); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int diedIdsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public IntVector diedIdsVector() { return diedIdsVector(new IntVector()); }
  public IntVector diedIdsVector(IntVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer diedIdsAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer diedIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  /**
   * The first sent Round in a match should have index 1. (The starting state,
   * created by the MatchHeader, can be thought to have index 0.)
   * It should increase by one for each following round.
   */
  public int roundId() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createRound(FlatBufferBuilder builder,
      int teamIdsOffset,
      int teamResourceAmountsOffset,
      int turnsOffset,
      int diedIdsOffset,
      int roundId) {
    builder.startTable(5);
    Round.addRoundId(builder, roundId);
    Round.addDiedIds(builder, diedIdsOffset);
    Round.addTurns(builder, turnsOffset);
    Round.addTeamResourceAmounts(builder, teamResourceAmountsOffset);
    Round.addTeamIds(builder, teamIdsOffset);
    return Round.endRound(builder);
  }

  public static void startRound(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTeamIds(FlatBufferBuilder builder, int teamIdsOffset) { builder.addOffset(0, teamIdsOffset, 0); }
  public static int createTeamIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTeamIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTeamResourceAmounts(FlatBufferBuilder builder, int teamResourceAmountsOffset) { builder.addOffset(1, teamResourceAmountsOffset, 0); }
  public static int createTeamResourceAmountsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startTeamResourceAmountsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTurns(FlatBufferBuilder builder, int turnsOffset) { builder.addOffset(2, turnsOffset, 0); }
  public static int createTurnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTurnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDiedIds(FlatBufferBuilder builder, int diedIdsOffset) { builder.addOffset(3, diedIdsOffset, 0); }
  public static int createDiedIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDiedIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRoundId(FlatBufferBuilder builder, int roundId) { builder.addInt(4, roundId, 0); }
  public static int endRound(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Round get(int j) { return get(new Round(), j); }
    public Round get(Round obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

