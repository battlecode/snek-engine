// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Sent to end a match.
 */
@SuppressWarnings("unused")
public final class MatchFooter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MatchFooter getRootAsMatchFooter(ByteBuffer _bb) { return getRootAsMatchFooter(_bb, new MatchFooter()); }
  public static MatchFooter getRootAsMatchFooter(ByteBuffer _bb, MatchFooter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatchFooter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The ID of the winning team.
   */
  public byte winner() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The reason for winning
   */
  public byte winType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The number of rounds played.
   */
  public int totalRounds() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Profiler data for team A and B if profiling is enabled.
   */
  public battlecode.schema.ProfilerFile profilerFiles(int j) { return profilerFiles(new battlecode.schema.ProfilerFile(), j); }
  public battlecode.schema.ProfilerFile profilerFiles(battlecode.schema.ProfilerFile obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int profilerFilesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public battlecode.schema.ProfilerFile.Vector profilerFilesVector() { return profilerFilesVector(new battlecode.schema.ProfilerFile.Vector()); }
  public battlecode.schema.ProfilerFile.Vector profilerFilesVector(battlecode.schema.ProfilerFile.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMatchFooter(FlatBufferBuilder builder,
      byte winner,
      byte winType,
      int totalRounds,
      int profilerFilesOffset) {
    builder.startTable(4);
    MatchFooter.addProfilerFiles(builder, profilerFilesOffset);
    MatchFooter.addTotalRounds(builder, totalRounds);
    MatchFooter.addWinType(builder, winType);
    MatchFooter.addWinner(builder, winner);
    return MatchFooter.endMatchFooter(builder);
  }

  public static void startMatchFooter(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addWinner(FlatBufferBuilder builder, byte winner) { builder.addByte(0, winner, 0); }
  public static void addWinType(FlatBufferBuilder builder, byte winType) { builder.addByte(1, winType, 0); }
  public static void addTotalRounds(FlatBufferBuilder builder, int totalRounds) { builder.addInt(2, totalRounds, 0); }
  public static void addProfilerFiles(FlatBufferBuilder builder, int profilerFilesOffset) { builder.addOffset(3, profilerFilesOffset, 0); }
  public static int createProfilerFilesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startProfilerFilesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMatchFooter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatchFooter get(int j) { return get(new MatchFooter(), j); }
    public MatchFooter get(MatchFooter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

