// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * The final event sent in the game.
 */
@SuppressWarnings("unused")
public final class GameFooter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static GameFooter getRootAsGameFooter(ByteBuffer _bb) { return getRootAsGameFooter(_bb, new GameFooter()); }
  public static GameFooter getRootAsGameFooter(ByteBuffer _bb, GameFooter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameFooter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The ID of the winning team of the game.
   */
  public byte winner() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createGameFooter(FlatBufferBuilder builder,
      byte winner) {
    builder.startTable(1);
    GameFooter.addWinner(builder, winner);
    return GameFooter.endGameFooter(builder);
  }

  public static void startGameFooter(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addWinner(FlatBufferBuilder builder, byte winner) { builder.addByte(0, winner, 0); }
  public static int endGameFooter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameFooter get(int j) { return get(new GameFooter(), j); }
    public GameFooter get(GameFooter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

