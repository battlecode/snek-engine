// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RobotType } from '../../battlecode/schema/robot-type';


export class RobotTypeMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RobotTypeMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRobotTypeMetadata(bb:flatbuffers.ByteBuffer, obj?:RobotTypeMetadata):RobotTypeMetadata {
  return (obj || new RobotTypeMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRobotTypeMetadata(bb:flatbuffers.ByteBuffer, obj?:RobotTypeMetadata):RobotTypeMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RobotTypeMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():RobotType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RobotType.NONE;
}

actionCooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

movementCooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

baseHealth():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

actionRadiusSquared():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

visionRadiusSquared():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

bytecodeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRobotTypeMetadata(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addType(builder:flatbuffers.Builder, type:RobotType) {
  builder.addFieldInt8(0, type, RobotType.NONE);
}

static addActionCooldown(builder:flatbuffers.Builder, actionCooldown:number) {
  builder.addFieldInt32(1, actionCooldown, 0);
}

static addMovementCooldown(builder:flatbuffers.Builder, movementCooldown:number) {
  builder.addFieldInt32(2, movementCooldown, 0);
}

static addBaseHealth(builder:flatbuffers.Builder, baseHealth:number) {
  builder.addFieldInt32(3, baseHealth, 0);
}

static addActionRadiusSquared(builder:flatbuffers.Builder, actionRadiusSquared:number) {
  builder.addFieldInt32(4, actionRadiusSquared, 0);
}

static addVisionRadiusSquared(builder:flatbuffers.Builder, visionRadiusSquared:number) {
  builder.addFieldInt32(5, visionRadiusSquared, 0);
}

static addBytecodeLimit(builder:flatbuffers.Builder, bytecodeLimit:number) {
  builder.addFieldInt32(6, bytecodeLimit, 0);
}

static endRobotTypeMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRobotTypeMetadata(builder:flatbuffers.Builder, type:RobotType, actionCooldown:number, movementCooldown:number, baseHealth:number, actionRadiusSquared:number, visionRadiusSquared:number, bytecodeLimit:number):flatbuffers.Offset {
  RobotTypeMetadata.startRobotTypeMetadata(builder);
  RobotTypeMetadata.addType(builder, type);
  RobotTypeMetadata.addActionCooldown(builder, actionCooldown);
  RobotTypeMetadata.addMovementCooldown(builder, movementCooldown);
  RobotTypeMetadata.addBaseHealth(builder, baseHealth);
  RobotTypeMetadata.addActionRadiusSquared(builder, actionRadiusSquared);
  RobotTypeMetadata.addVisionRadiusSquared(builder, visionRadiusSquared);
  RobotTypeMetadata.addBytecodeLimit(builder, bytecodeLimit);
  return RobotTypeMetadata.endRobotTypeMetadata(builder);
}
}
