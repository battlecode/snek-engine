# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class Turn(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Turn()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTurn(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Turn
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Turn
    def RobotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def Health(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def Paint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def MoveCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def ActionCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def BytecodesUsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Turn
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Turn
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Turn
    def ActionsType(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Turn
    def ActionsTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Turn
    def ActionsTypeLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Turn
    def ActionsTypeIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Turn
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x -= self._tab.Pos
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, x)
            return obj
        return None

    # Turn
    def ActionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Turn
    def ActionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def TurnStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def Start(builder: flatbuffers.Builder):
    TurnStart(builder)

def TurnAddRobotId(builder: flatbuffers.Builder, robotId: int):
    builder.PrependInt32Slot(0, robotId, 0)

def AddRobotId(builder: flatbuffers.Builder, robotId: int):
    TurnAddRobotId(builder, robotId)

def TurnAddHealth(builder: flatbuffers.Builder, health: int):
    builder.PrependInt32Slot(1, health, 0)

def AddHealth(builder: flatbuffers.Builder, health: int):
    TurnAddHealth(builder, health)

def TurnAddPaint(builder: flatbuffers.Builder, paint: int):
    builder.PrependInt32Slot(2, paint, 0)

def AddPaint(builder: flatbuffers.Builder, paint: int):
    TurnAddPaint(builder, paint)

def TurnAddMoveCooldown(builder: flatbuffers.Builder, moveCooldown: int):
    builder.PrependInt32Slot(3, moveCooldown, 0)

def AddMoveCooldown(builder: flatbuffers.Builder, moveCooldown: int):
    TurnAddMoveCooldown(builder, moveCooldown)

def TurnAddActionCooldown(builder: flatbuffers.Builder, actionCooldown: int):
    builder.PrependInt32Slot(4, actionCooldown, 0)

def AddActionCooldown(builder: flatbuffers.Builder, actionCooldown: int):
    TurnAddActionCooldown(builder, actionCooldown)

def TurnAddBytecodesUsed(builder: flatbuffers.Builder, bytecodesUsed: int):
    builder.PrependInt32Slot(5, bytecodesUsed, 0)

def AddBytecodesUsed(builder: flatbuffers.Builder, bytecodesUsed: int):
    TurnAddBytecodesUsed(builder, bytecodesUsed)

def TurnAddX(builder: flatbuffers.Builder, x: int):
    builder.PrependUint8Slot(6, x, 0)

def AddX(builder: flatbuffers.Builder, x: int):
    TurnAddX(builder, x)

def TurnAddY(builder: flatbuffers.Builder, y: int):
    builder.PrependUint8Slot(7, y, 0)

def AddY(builder: flatbuffers.Builder, y: int):
    TurnAddY(builder, y)

def TurnAddActionsType(builder: flatbuffers.Builder, actionsType: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(actionsType), 0)

def AddActionsType(builder: flatbuffers.Builder, actionsType: int):
    TurnAddActionsType(builder, actionsType)

def TurnStartActionsTypeVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartActionsTypeVector(builder, numElems: int) -> int:
    return TurnStartActionsTypeVector(builder, numElems)

def TurnAddActions(builder: flatbuffers.Builder, actions: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def AddActions(builder: flatbuffers.Builder, actions: int):
    TurnAddActions(builder, actions)

def TurnStartActionsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartActionsVector(builder, numElems: int) -> int:
    return TurnStartActionsVector(builder, numElems)

def TurnEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TurnEnd(builder)
