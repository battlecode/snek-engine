from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.Event import Event
from flatbuffers import table

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class EventWrapper(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> EventWrapper: ...
  @classmethod
  def GetRootAsEventWrapper(cls, buf: bytes, offset: int) -> EventWrapper: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def EType(self) -> typing.Literal[Event.NONE, Event.GameHeader, Event.MatchHeader, Event.Round, Event.MatchFooter, Event.GameFooter]: ...
  def E(self) -> table.Table | None: ...
def EventWrapperStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def EventWrapperAddEType(builder: flatbuffers.Builder, eType: typing.Literal[Event.NONE, Event.GameHeader, Event.MatchHeader, Event.Round, Event.MatchFooter, Event.GameFooter]) -> None: ...
def EventWrapperAddE(builder: flatbuffers.Builder, e: uoffset) -> None: ...
def EventWrapperEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

