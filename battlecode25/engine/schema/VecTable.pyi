from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class VecTable(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> VecTable: ...
  @classmethod
  def GetRootAsVecTable(cls, buf: bytes, offset: int) -> VecTable: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Xs(self, i: int) -> typing.List[int]: ...
  def XsAsNumpy(self) -> np.ndarray: ...
  def XsLength(self) -> int: ...
  def XsIsNone(self) -> bool: ...
  def Ys(self, i: int) -> typing.List[int]: ...
  def YsAsNumpy(self) -> np.ndarray: ...
  def YsLength(self) -> int: ...
  def YsIsNone(self) -> bool: ...
def VecTableStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def VecTableAddXs(builder: flatbuffers.Builder, xs: uoffset) -> None: ...
def VecTableStartXsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartXsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def VecTableAddYs(builder: flatbuffers.Builder, ys: uoffset) -> None: ...
def VecTableStartYsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartYsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def VecTableEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

