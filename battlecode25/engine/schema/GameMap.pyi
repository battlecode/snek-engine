from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.InitialBodyTable import InitialBodyTable
from ..schema.Vec import Vec
from ..schema.VecTable import VecTable

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class GameMap(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> GameMap: ...
  @classmethod
  def GetRootAsGameMap(cls, buf: bytes, offset: int) -> GameMap: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Size(self) -> Vec | None: ...
  def Symmetry(self) -> int: ...
  def InitialBodies(self) -> InitialBodyTable | None: ...
  def RandomSeed(self) -> int: ...
  def Walls(self, i: int) -> typing.List[bool]: ...
  def WallsAsNumpy(self) -> np.ndarray: ...
  def WallsLength(self) -> int: ...
  def WallsIsNone(self) -> bool: ...
  def Paint(self, i: int) -> typing.List[int]: ...
  def PaintAsNumpy(self) -> np.ndarray: ...
  def PaintLength(self) -> int: ...
  def PaintIsNone(self) -> bool: ...
  def Ruins(self) -> VecTable | None: ...
  def PaintPatterns(self, i: int) -> typing.List[int]: ...
  def PaintPatternsAsNumpy(self) -> np.ndarray: ...
  def PaintPatternsLength(self) -> int: ...
  def PaintPatternsIsNone(self) -> bool: ...
def GameMapStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def GameMapAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def GameMapAddSize(builder: flatbuffers.Builder, size: uoffset) -> None: ...
def GameMapAddSymmetry(builder: flatbuffers.Builder, symmetry: int) -> None: ...
def GameMapAddInitialBodies(builder: flatbuffers.Builder, initialBodies: uoffset) -> None: ...
def GameMapAddRandomSeed(builder: flatbuffers.Builder, randomSeed: int) -> None: ...
def GameMapAddWalls(builder: flatbuffers.Builder, walls: uoffset) -> None: ...
def GameMapStartWallsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartWallsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GameMapAddPaint(builder: flatbuffers.Builder, paint: uoffset) -> None: ...
def GameMapStartPaintVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartPaintVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GameMapAddRuins(builder: flatbuffers.Builder, ruins: uoffset) -> None: ...
def GameMapAddPaintPatterns(builder: flatbuffers.Builder, paintPatterns: uoffset) -> None: ...
def GameMapStartPaintPatternsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartPaintPatternsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GameMapEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

