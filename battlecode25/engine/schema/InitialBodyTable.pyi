from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.SpawnAction import SpawnAction

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class InitialBodyTable(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> InitialBodyTable: ...
  @classmethod
  def GetRootAsInitialBodyTable(cls, buf: bytes, offset: int) -> InitialBodyTable: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def RobotIds(self, i: int) -> typing.List[int]: ...
  def RobotIdsAsNumpy(self) -> np.ndarray: ...
  def RobotIdsLength(self) -> int: ...
  def RobotIdsIsNone(self) -> bool: ...
  def SpawnActions(self, i: int) -> SpawnAction | None: ...
  def SpawnActionsLength(self) -> int: ...
  def SpawnActionsIsNone(self) -> bool: ...
def InitialBodyTableStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def InitialBodyTableAddRobotIds(builder: flatbuffers.Builder, robotIds: uoffset) -> None: ...
def InitialBodyTableStartRobotIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartRobotIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def InitialBodyTableAddSpawnActions(builder: flatbuffers.Builder, spawnActions: uoffset) -> None: ...
def InitialBodyTableStartSpawnActionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartSpawnActionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def InitialBodyTableEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

