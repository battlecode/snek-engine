# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from ..schema.Turn import Turn
from typing import Optional
np = import_numpy()

# A single time-step in a Game, which contains a list of robot turns
class Round(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Round()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRound(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Round
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The IDs of teams in the Game.
    # Round
    def TeamIds(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Round
    def TeamIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Round
    def TeamIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def TeamIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # The total amount of resource this round per team
    # Round
    def TeamResourceAmounts(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Round
    def TeamResourceAmountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Round
    def TeamResourceAmountsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def TeamResourceAmountsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # The total paint coverage percent per team, mult by 10 (i.e. 70.5% is 705)
    # Round
    def TeamCoverageAmounts(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Round
    def TeamCoverageAmountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Round
    def TeamCoverageAmountsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def TeamCoverageAmountsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # The total number of active resource patterns per team
    # Round
    def TeamResourcePatternAmounts(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Round
    def TeamResourcePatternAmountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Round
    def TeamResourcePatternAmountsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def TeamResourcePatternAmountsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Ordered turn data for each robot during the round
    # Round
    def Turns(self, j: int) -> Optional[Turn]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Turn()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Round
    def TurnsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def TurnsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # The IDs of bodies that died at the end of the round, with no attributable cause.
    # Round
    def DiedIds(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Round
    def DiedIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Round
    def DiedIdsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Round
    def DiedIdsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # The first sent Round in a match should have index 1. (The starting state,
    # created by the MatchHeader, can be thought to have index 0.)
    # It should increase by one for each following round.
    # Round
    def RoundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RoundStart(builder: flatbuffers.Builder):
    builder.StartObject(7)

def Start(builder: flatbuffers.Builder):
    RoundStart(builder)

def RoundAddTeamIds(builder: flatbuffers.Builder, teamIds: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(teamIds), 0)

def AddTeamIds(builder: flatbuffers.Builder, teamIds: int):
    RoundAddTeamIds(builder, teamIds)

def RoundStartTeamIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTeamIdsVector(builder, numElems: int) -> int:
    return RoundStartTeamIdsVector(builder, numElems)

def RoundAddTeamResourceAmounts(builder: flatbuffers.Builder, teamResourceAmounts: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamResourceAmounts), 0)

def AddTeamResourceAmounts(builder: flatbuffers.Builder, teamResourceAmounts: int):
    RoundAddTeamResourceAmounts(builder, teamResourceAmounts)

def RoundStartTeamResourceAmountsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTeamResourceAmountsVector(builder, numElems: int) -> int:
    return RoundStartTeamResourceAmountsVector(builder, numElems)

def RoundAddTeamCoverageAmounts(builder: flatbuffers.Builder, teamCoverageAmounts: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(teamCoverageAmounts), 0)

def AddTeamCoverageAmounts(builder: flatbuffers.Builder, teamCoverageAmounts: int):
    RoundAddTeamCoverageAmounts(builder, teamCoverageAmounts)

def RoundStartTeamCoverageAmountsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTeamCoverageAmountsVector(builder, numElems: int) -> int:
    return RoundStartTeamCoverageAmountsVector(builder, numElems)

def RoundAddTeamResourcePatternAmounts(builder: flatbuffers.Builder, teamResourcePatternAmounts: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(teamResourcePatternAmounts), 0)

def AddTeamResourcePatternAmounts(builder: flatbuffers.Builder, teamResourcePatternAmounts: int):
    RoundAddTeamResourcePatternAmounts(builder, teamResourcePatternAmounts)

def RoundStartTeamResourcePatternAmountsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTeamResourcePatternAmountsVector(builder, numElems: int) -> int:
    return RoundStartTeamResourcePatternAmountsVector(builder, numElems)

def RoundAddTurns(builder: flatbuffers.Builder, turns: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(turns), 0)

def AddTurns(builder: flatbuffers.Builder, turns: int):
    RoundAddTurns(builder, turns)

def RoundStartTurnsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTurnsVector(builder, numElems: int) -> int:
    return RoundStartTurnsVector(builder, numElems)

def RoundAddDiedIds(builder: flatbuffers.Builder, diedIds: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(diedIds), 0)

def AddDiedIds(builder: flatbuffers.Builder, diedIds: int):
    RoundAddDiedIds(builder, diedIds)

def RoundStartDiedIdsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartDiedIdsVector(builder, numElems: int) -> int:
    return RoundStartDiedIdsVector(builder, numElems)

def RoundAddRoundId(builder: flatbuffers.Builder, roundId: int):
    builder.PrependInt32Slot(6, roundId, 0)

def AddRoundId(builder: flatbuffers.Builder, roundId: int):
    RoundAddRoundId(builder, roundId)

def RoundEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return RoundEnd(builder)
