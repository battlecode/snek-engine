# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from ..schema.GameMap import GameMap
from typing import Optional
np = import_numpy()

# Sent to start a match.
class MatchHeader(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MatchHeader()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMatchHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MatchHeader
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MatchHeader
    def Map(self) -> Optional[GameMap]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GameMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MatchHeader
    def MaxRounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MatchHeaderStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    MatchHeaderStart(builder)

def MatchHeaderAddMap(builder: flatbuffers.Builder, map: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def AddMap(builder: flatbuffers.Builder, map: int):
    MatchHeaderAddMap(builder, map)

def MatchHeaderAddMaxRounds(builder: flatbuffers.Builder, maxRounds: int):
    builder.PrependInt32Slot(1, maxRounds, 0)

def AddMaxRounds(builder: flatbuffers.Builder, maxRounds: int):
    MatchHeaderAddMaxRounds(builder, maxRounds)

def MatchHeaderEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return MatchHeaderEnd(builder)
