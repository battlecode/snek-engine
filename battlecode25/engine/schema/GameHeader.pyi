from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.GameplayConstants import GameplayConstants
from ..schema.RobotTypeMetadata import RobotTypeMetadata
from ..schema.TeamData import TeamData

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class GameHeader(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> GameHeader: ...
  @classmethod
  def GetRootAsGameHeader(cls, buf: bytes, offset: int) -> GameHeader: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def SpecVersion(self) -> str | None: ...
  def Teams(self, i: int) -> TeamData | None: ...
  def TeamsLength(self) -> int: ...
  def TeamsIsNone(self) -> bool: ...
  def RobotTypeMetadata(self, i: int) -> RobotTypeMetadata | None: ...
  def RobotTypeMetadataLength(self) -> int: ...
  def RobotTypeMetadataIsNone(self) -> bool: ...
  def Constants(self) -> GameplayConstants | None: ...
def GameHeaderStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def GameHeaderAddSpecVersion(builder: flatbuffers.Builder, specVersion: uoffset) -> None: ...
def GameHeaderAddTeams(builder: flatbuffers.Builder, teams: uoffset) -> None: ...
def GameHeaderStartTeamsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTeamsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GameHeaderAddRobotTypeMetadata(builder: flatbuffers.Builder, robotTypeMetadata: uoffset) -> None: ...
def GameHeaderStartRobotTypeMetadataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartRobotTypeMetadataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GameHeaderAddConstants(builder: flatbuffers.Builder, constants: uoffset) -> None: ...
def GameHeaderEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

