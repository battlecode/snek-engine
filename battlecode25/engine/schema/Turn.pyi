from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.Action import Action

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Turn(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Turn: ...
  @classmethod
  def GetRootAsTurn(cls, buf: bytes, offset: int) -> Turn: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def RobotId(self) -> int: ...
  def Health(self) -> int: ...
  def Paint(self) -> int: ...
  def MoveCooldown(self) -> int: ...
  def ActionCooldown(self) -> int: ...
  def BytecodesUsed(self) -> int: ...
  def X(self) -> int: ...
  def Y(self) -> int: ...
  def ActionsType(self, i: int) -> typing.Literal[Action.NONE, Action.DamageAction, Action.PaintAction, Action.UnpaintAction, Action.MarkAction, Action.UnmarkAction, Action.AttackAction, Action.SplashAction, Action.MopAction, Action.BuildAction, Action.TransferAction, Action.MessageAction, Action.SpawnAction, Action.DieAction, Action.UpgradeAction, Action.IndicatorStringAction, Action.IndicatorDotAction, Action.IndicatorLineAction]: ...
  def ActionsTypeAsNumpy(self) -> np.ndarray: ...
  def ActionsTypeLength(self) -> int: ...
  def ActionsTypeIsNone(self) -> bool: ...
  def Actions(self, i: int) -> typing.Literal[Action.NONE, Action.DamageAction, Action.PaintAction, Action.UnpaintAction, Action.MarkAction, Action.UnmarkAction, Action.AttackAction, Action.SplashAction, Action.MopAction, Action.BuildAction, Action.TransferAction, Action.MessageAction, Action.SpawnAction, Action.DieAction, Action.UpgradeAction, Action.IndicatorStringAction, Action.IndicatorDotAction, Action.IndicatorLineAction]: ...
  def ActionsAsNumpy(self) -> np.ndarray: ...
  def ActionsLength(self) -> int: ...
  def ActionsIsNone(self) -> bool: ...
def TurnStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def TurnAddRobotId(builder: flatbuffers.Builder, robotId: int) -> None: ...
def TurnAddHealth(builder: flatbuffers.Builder, health: int) -> None: ...
def TurnAddPaint(builder: flatbuffers.Builder, paint: int) -> None: ...
def TurnAddMoveCooldown(builder: flatbuffers.Builder, moveCooldown: int) -> None: ...
def TurnAddActionCooldown(builder: flatbuffers.Builder, actionCooldown: int) -> None: ...
def TurnAddBytecodesUsed(builder: flatbuffers.Builder, bytecodesUsed: int) -> None: ...
def TurnAddX(builder: flatbuffers.Builder, x: int) -> None: ...
def TurnAddY(builder: flatbuffers.Builder, y: int) -> None: ...
def TurnAddActionsType(builder: flatbuffers.Builder, actionsType: uoffset) -> None: ...
def TurnStartActionsTypeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartActionsTypeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TurnAddActions(builder: flatbuffers.Builder, actions: uoffset) -> None: ...
def TurnStartActionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartActionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TurnEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

