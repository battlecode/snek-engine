from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.Turn import Turn

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Round(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Round: ...
  @classmethod
  def GetRootAsRound(cls, buf: bytes, offset: int) -> Round: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def TeamIds(self, i: int) -> typing.List[int]: ...
  def TeamIdsAsNumpy(self) -> np.ndarray: ...
  def TeamIdsLength(self) -> int: ...
  def TeamIdsIsNone(self) -> bool: ...
  def TeamResourceAmounts(self, i: int) -> typing.List[int]: ...
  def TeamResourceAmountsAsNumpy(self) -> np.ndarray: ...
  def TeamResourceAmountsLength(self) -> int: ...
  def TeamResourceAmountsIsNone(self) -> bool: ...
  def TeamCoverageAmounts(self, i: int) -> typing.List[int]: ...
  def TeamCoverageAmountsAsNumpy(self) -> np.ndarray: ...
  def TeamCoverageAmountsLength(self) -> int: ...
  def TeamCoverageAmountsIsNone(self) -> bool: ...
  def Turns(self, i: int) -> Turn | None: ...
  def TurnsLength(self) -> int: ...
  def TurnsIsNone(self) -> bool: ...
  def DiedIds(self, i: int) -> typing.List[int]: ...
  def DiedIdsAsNumpy(self) -> np.ndarray: ...
  def DiedIdsLength(self) -> int: ...
  def DiedIdsIsNone(self) -> bool: ...
  def RoundId(self) -> int: ...
def RoundStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def RoundAddTeamIds(builder: flatbuffers.Builder, teamIds: uoffset) -> None: ...
def RoundStartTeamIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTeamIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def RoundAddTeamResourceAmounts(builder: flatbuffers.Builder, teamResourceAmounts: uoffset) -> None: ...
def RoundStartTeamResourceAmountsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTeamResourceAmountsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def RoundAddTeamCoverageAmounts(builder: flatbuffers.Builder, teamCoverageAmounts: uoffset) -> None: ...
def RoundStartTeamCoverageAmountsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTeamCoverageAmountsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def RoundAddTurns(builder: flatbuffers.Builder, turns: uoffset) -> None: ...
def RoundStartTurnsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTurnsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def RoundAddDiedIds(builder: flatbuffers.Builder, diedIds: uoffset) -> None: ...
def RoundStartDiedIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartDiedIdsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def RoundAddRoundId(builder: flatbuffers.Builder, roundId: int) -> None: ...
def RoundEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

