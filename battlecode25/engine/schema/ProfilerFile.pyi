from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from ..schema.ProfilerProfile import ProfilerProfile

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class ProfilerFile(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ProfilerFile: ...
  @classmethod
  def GetRootAsProfilerFile(cls, buf: bytes, offset: int) -> ProfilerFile: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Frames(self, i: int) -> str: ...
  def FramesLength(self) -> int: ...
  def FramesIsNone(self) -> bool: ...
  def Profiles(self, i: int) -> ProfilerProfile | None: ...
  def ProfilesLength(self) -> int: ...
  def ProfilesIsNone(self) -> bool: ...
def ProfilerFileStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def ProfilerFileAddFrames(builder: flatbuffers.Builder, frames: uoffset) -> None: ...
def ProfilerFileStartFramesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartFramesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ProfilerFileAddProfiles(builder: flatbuffers.Builder, profiles: uoffset) -> None: ...
def ProfilerFileStartProfilesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartProfilesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ProfilerFileEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

